#Getting Registry

$systemKey = "HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\Run","HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\RunOnce"


#Define for loop to iterate Registry Key

ForEach($key in $systemKey){
    Get-ItemProperty -Path "Registry::$key"

}


#Create array of user profile & sids

Write-Output "###########################################################################"
Write-Output "#####################     USER PROFILE & SIDS    ##########################"
Write-Output "###########################################################################"
Write-Output "###########################################################################"
Write-Output "                                                                            "
$users = (Get-WmiObject Win32_UserProfile | Where-Object {$_.SID -notmatch 'S-1-5-(18|19|20).*'})
$userPat=$users.localpath
$userSIDS = $users.sid

Write-Output $userPat
write-Output $userSIDS


Write-Output "                                                                            "
Write-Output "###########################################################################"
Write-Output "###################    Registry Key & Applications   ######################"
Write-Output "###########################################################################"
Write-Output "###########################################################################"
Write-Output "                                                                            "


for ($counter=0;$counter -lt $users.Length; $counter++){
    $path=$users[$counter].localpath
    $sid = $users[$counter].sid
    reg load hku\$sid $path\ntuser.dat
}

Write-Output "                                                                            "

Get-ItemProperty Registry::\hku\*\Software\microsoft\Windows\CurrentVersion\run;
Get-ItemProperty Registry::\hku\*\Software\microsoft\Windows\CurrentVersion\runonce;

    foreach($key in $systemKey){
        Get-ItemProperty Registry::$key
    }

Write-Output "                                                                            "
Write-Output "                                                                            "
Write-Output "###########################################################################"
Write-Output "#####################    Services & Installations   #######################"
Write-Output "###########################################################################"
Write-Output "###########################################################################"
Write-Output "                                                                            "

#If possible try to save this output in a text file
Get-WmiObject win32_service | select Name, DisplayName | Format-List 

Write-Output "                                                                            "
Write-Output "                                                                            "
Write-Output "###########################################################################"
Write-Output "#########################    Scheduled Tasks   ############################"
Write-Output "#######################  A persistence mechanism  #########################"
Write-Output "###########################################################################"
Write-Output "                                                                            "

# output in a text file
$tasks = Get-ChildItem "C:\Windows\System32\Tasks" -Recurse

ForEach($task in $tasks){
    Write-Host "`r`n[+] Task: $task" -ForegroundColor Yellow
    Write-Host "-----------------------------------------`r`n"-ForegroundColor Yellow
}

Write-Output "                                                                            "
Write-Output "                                                                            "
Write-Output "###########################################################################"
Write-Output "#######################    WMI Subscriptions   ############################"
Write-Output "#######################  A persistence mechanism  #########################"
Write-Output "###########################################################################"
Write-Output "                                                                            "

#If possible try to save this output in a text file
Write-Host "`r`n[+] WMI subs: `r`n" -ForegroundColor Yellow
Write-Host "-----------------------------------------`r`n" -ForegroundColor Yellow
Get-WmiObject -Namespace root/Subscription -Class __EventFilter 

Write-Output "                                                                            "
Write-Output "                                                                            "
Write-Output "###########################################################################"
Write-Output "#######################    WMI Subscriptions   ############################"
Write-Output "############  A less common persistence mechanism  ########################"
Write-Output "###########################################################################"
Write-Output "                                                                            "

#If possible try to save this output in a text file
Write-Host "`r`n[+] Startup Folder Contents: `r`n" -ForegroundColor Yellow
Write-Host "-----------------------------------------`r`n" -ForegroundColor Yellow
$dirPath = 'C:\Users\*\Appdata\Roaming\Microsoft\Windows\Start Menu\Programs\Startup\*'
Get-ChildItem $dirPath | Where-Object {$_.Name -ne 'desktop.ini'}

Write-Output "                                                                            "
Write-Output "                                                                            "
Write-Output "###########################################################################"
Write-Output "#######################    User Log Ons   #################################"
Write-Output "############  A less common persistence mechanism  ########################"
Write-Output "###########################################################################"
Write-Output "                                                                            "

#If possible try to save this output in a text file
#Checking user log ons

Write-Host "`r`n[+] Terminal services logons: `r`n "
Write-Host "-----------------------------------------`r`n"
#$preDate = Get-Date 15/05/2023; #change to suite your investigation- Also add user input to automate what date to get
#$postDate = Get-Date 15/05/2024; #change to suite your investigation - Also add user input to automate what date to get
#Get-WinEvent -FilterHashtable @{LogName='Security'; StartTime=$postDate; EndTime=$preDate; Id='4624'} | where {$_.Message -match "Logon Type:\s+10"} | select TimeCreated, Message

# Prompt the user to input the start and end dates
$startDate = Read-Host "Enter the start date (MM/DD/YYYY)"
$endDate = Read-Host "Enter the end date (MM/DD/YYYY)"

# Convert user input to DateTime objects
$startDate = [datetime]::ParseExact($startDate, 'MM/dd/yyyy', $null)
$endDate = [datetime]::ParseExact($endDate, 'MM/dd/yyyy', $null)

# Output header
Write-Host "`n[+] Terminal Services Logons:`n" -ForegroundColor Yellow
Write-Host "-----------------------------------------`n" -ForegroundColor Yellow

# Retrieve and filter log events
$logonEvents = Get-WinEvent -FilterHashtable @{
    LogName='Security';
    StartTime=$startDate;
    EndTime=$endDate;
    Id=4624
} | Where-Object {
    $_.Message -match "Logon Type:\s+10"
} | Select-Object TimeCreated, Message

# Display logon events
if ($logonEvents) {
    $logonEvents | ForEach-Object {
        Write-Host "Time Created: $($_.TimeCreated)"
        Write-Host "Message:`n$($_.Message)`n" -ForegroundColor Cyan
    }
} else {
    Write-Host "No Terminal Services logon events found between $startDate and $endDate." -ForegroundColor Red
}

#Locating seconday stages of malware infection

Write-Host "`r`n[+] Recently Written Files: `r`n:" -ForegroundColor Yellow
Write-Host "-----------------------------------------`r`n" -ForegroundColor Yellow
$recentFile = Get-ChildItem -Path C:\ -Filter *.exe -Recurse -ErrorAction SilentlyContinue -Force | ?{$_.LastWriteTime -gt (Get-Date).AddDays(-1)} | select -exp FullName
    ForEach($file in $recentFile){
        Write-Host $file
    }

Write-Host "`r`n[+] Files with ADS: `r`n:" -ForegroundColor Yellow
Write-Host "-----------------------------------------`r`n" -ForegroundColor Yellow
    foreach($file in $recentFile){
        Get-Item $file -Stream * | Where-Object stream -ne ' :Data'
    }

